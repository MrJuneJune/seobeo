char* CRUD_SRC_TEMPLATE =
"#include \"model_{{TABLE_NAME}}.h\"\n"
"#include <stdlib.h>\n"
"#include <stdio.h>\n"
"#include <string.h>\n"
"\n"
"{{STRUCT_NAME}}Query Query{{STRUCT_NAME}}(PGconn *conn, const char *select, const char *where_clause)\n"
"{\n"
"  {{STRUCT_NAME}}Query query_result;\n"
"  char query[{{QUERY_BUFFER}}];\n"
"  snprintf(query, sizeof(query), \"SELECT %s FROM {{TABLE_NAME}} WHERE %s;\", select, where_clause);\n"
"  printf(\"SQL: %s\\n\", query);\n"
"  PGresult *res = PQexec(conn, query);\n"
"  ExecStatusType status = PQresultStatus(res);\n"
"  query_result.{{TABLE_NAME}} = NULL;\n"
"  query_result.status = status;\n"
"  if (status != PGRES_TUPLES_OK)\n"
"  {\n"
"    fprintf(stderr, \"QUERY failed: %s\\\\n\", PQerrorMessage(conn));\n"
"    PQclear(res);\n"
"    return query_result;\n"
"  }\n"
"  int rows = PQntuples(res);\n"
"  if (rows == 0) return query_result;\n"
"  {{STRUCT_NAME}}* list = malloc(rows * sizeof({{STRUCT_NAME}}));\n"
"  for (int i = 0; i < rows; i++)\n"
"  {\n"
"    memset(&list[i], 0, sizeof({{STRUCT_NAME}}));\n"
"    for (int j = 0; j < PQnfields(res); j++)\n"
"    {\n"
"      const char *colname = PQfname(res, j);\n"
"      const char *value = PQgetvalue(res, i, j);\n"
"{{FIELD_ASSIGNMENTS}}\n"
"    }\n"
"  }\n"
"  PQclear(res);\n"
"  query_result.{{TABLE_NAME}} = list;\n"
"  return query_result;\n"
"}\n"
"\n"
"{{TABLE_NAME}}Query Insert{{STRUCT_NAME}}(PGconn *conn, {{STRUCT_NAME}} u)\n"
"{\n"
"  {{STRUCT_NAME}}Query query_result;\n"
"  char query[{{QUERY_BUFFER}}];\n"
"  snprintf(query, sizeof(query),\n"
"    \"INSERT INTO {{TABLE_NAME}} {{COLUMN_NAMES}} \"\n"
"    \"VALUES ({{FORMAT_PARTS}});\",\n"
"    {{VALUE_ARGS}});\n"
"  printf(\"SQL: %s\\n\", query);\n"
"  PGresult *res = PQexec(conn, query);\n"
"  ExecStatusType status = PQresultStatus(res);\n"
"  query_result.{{TABLE_NAME}} = NULL;\n"
"  query_result.status = status;\n"
"  if (status != PGRES_COMMAND_OK)\n"
"  {\n"
"    fprintf(stderr, \"INSERT failed: %s\\\\n\", PQerrorMessage(conn));\n"
"  }\n"
"  PQclear(res);\n"
"  return query_result;\n"
"}\n"
"\n"
"{{STRUCT_NAME}}Query Update{{STRUCT_NAME}}(PGconn *conn, {{STRUCT_NAME}} u, const char *where_clause)\n"
"{\n"
"  {{STRUCT_NAME}}Query query_result;\n"
"  char query[{{QUERY_BUFFER}}];\n"
"  snprintf(query, sizeof(query),\n"
"    \"UPDATE {{TABLE_NAME}} SET {{SET_CLAUSE}} WHERE %s;\",\n"
"    {{UPDATE_ARGS}}, where_clause);\n"
"  printf(\"SQL: %s\\n\", query);\n"
"  PGresult *res = PQexec(conn, query);\n"
"  ExecStatusType status = PQresultStatus(res);\n"
"  query_result.{{TABLE_NAME}} = NULL;\n"
"  query_result.status = status;\n"
"  if (status != PGRES_COMMAND_OK)\n"
"  {\n"
"    fprintf(stderr, \"Update failed: %s\\n\", PQerrorMessage(conn));\n"
"  }\n"
"  PQclear(res);\n"
"  return query_result;\n"
"}\n"
"\n"
"{{STRUCT_NAME}}Query Delete{{STRUCT_NAME}}(PGconn *conn, const char *where_clause)\n"
"{\n"
"  {{STRUCT_NAME}}Query query_result;\n"
"  char query[{{QUERY_BUFFER}}];\n"
"  snprintf(query, sizeof(query),\n"
"    \"DELETE FROM {{TABLE_NAME}} WHERE %s;\",\n"
"    where_clause);\n"
"  printf(\"SQL: %s\\n\", query);\n"
"  PGresult *res = PQexec(conn, query);\n"
"  ExecStatusType status = PQresultStatus(res);\n"
"  query_result.{{TABLE_NAME}} = NULL;\n"
"  query_result.status = status;\n"
"  if (status != PGRES_COMMAND_OK)\n"
"  {\n"
"    fprintf(stderr, \"Update failed: %s\\n\", PQerrorMessage(conn));\n"
"  }\n"
"  PQclear(res);\n"
"  return query_result;\n"
"}\n"
"\n"
"char* Serialize{{STRUCT_NAME}}({{STRUCT_NAME}} u)\n"
"{\n"
"  char *buffer = malloc({{SERIALIZE_BUFFER}});\n"
"  if (!buffer) return NULL;\n"
"  snprintf(buffer, {{SERIALIZE_BUFFER}},\n"
"    \"{{SERIALIZE_JSON_FORMAT}}\",\n"
"{{SERIALIZE_JSON_ARGS}}\n"
"  );\n"
"  return buffer;\n"
"}\n"
"\n"
;
